from io import BufferedIOBase
from typing import Any, Optional, Dict, List, Callable, Tuple, Iterator, Iterable, Union, NoReturn

FOpen = Callable[[str, str], BufferedIOBase]

def open(*args: Any, **kwargs: Any) -> VPK: ...
def new(path: str, path_enc: str = ...) -> NewVPK: ...

class NewVPK:
    path_enc: str = ...
    signature: int = ...
    version: int = ...
    tree_length: int = ...
    header_length: int = ...
    tree: Dict[str, Dict[str, List[str]]] = ...
    path: str = ...
    file_count: int = ...
    def __init__(self, path: str, path_enc: str = ...) -> None: ...
    def read_dir(self, path: str) -> None: ...
    def calculate_tree_length(self) -> int: ...
    def save(self, vpk_output_path: str) -> None: ...
    def save_and_open(self, path: str) -> VPK: ...

Metadata = Tuple[bytes, int, int, int, int, int]
MetadataDict = Dict[str, Union[str, bytes]]

class VPK:
    signature: int = ...
    version: int = ...
    tree_length: int = ...
    header_length: int = ...
    path_enc: str = ...
    fopen: FOpen = ...
    tree: Optional[Dict[str, Metadata]] = ...
    vpk_path: str = ...
    def __init__(self, vpk_path: str, read_header_only: bool = ..., path_enc: str = ..., fopen: FOpen = ...) -> None: ...
    def __iter__(self) -> Iterator[str]: ...
    def items(self) -> Iterable[Tuple[str, Metadata]]: ...
    def __len__(self) -> int: ...
    def __enter__(self) -> VPK: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...
    def __getitem__(self, key: str) -> VPKFile: ...
    def get_file(self, path: str) -> VPKFile: ...
    def get_file_meta(self, path: str) -> MetadataDict: ...
    def get_vpkfile_instance(self, path: str, metadata: Union[Metadata, MetadataDict]) -> VPKFile: ...
    def read_header(self) -> None: ...
    def calculate_checksums(self) -> Tuple[bytes, bytes, bytes]: ...
    def read_index(self) -> None: ...
    def read_index_iter(self) -> Iterator[Tuple[str, Metadata]]: ...

class VPKFile:
    vpk_path: str = ...
    fopen: FOpen = ...
    vpk_meta: MetadataDict = ...
    length: int = ...
    offset: int = ...
    def __init__(self, vpk_path: str, fopen: FOpen = ..., **kw: Any) -> None: ...
    def save(self, path: str) -> None: ...
    def verify(self) -> bool: ...
    def __enter__(self) -> VPKFile: ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...
    def __iter__(self) -> Iterator[bytes]: ...
    def __next__(self) -> bytes: ...
    def next(self) -> bytes: ...
    def close(self) -> None: ...
    def tell(self) -> int: ...
    def seek(self, offset: int, whence: int = ...) -> None: ...
    def readlines(self) -> List[bytes]: ...
    def readline(self, a: bool = ...) -> bytes: ...
    def read(self, length: int = ...) -> bytes: ...
    def write(self, seq: bytes) -> NoReturn: ...
